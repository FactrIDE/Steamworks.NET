<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <!-- This target file was inspired by SkiaSharp one, it will be used to copy the native Lua dll to the output directory -->

    <!-- if ShouldIncludeNativeSteamworks == False then don't include the native Steamworks -->
    <PropertyGroup>
        <ShouldIncludeNativeSteamworks Condition=" '$(ShouldIncludeNativeSteamworks)' == '' ">True</ShouldIncludeNativeSteamworks>
    </PropertyGroup>

    <!-- get the preferred architecture -->
    <PropertyGroup>
        <!-- handle x86/x64 specifically -->
        <PreferredNativeSteamworks Condition=" '$(PreferredNativeSteamworks)' == '' and ( '$(PlatformTarget)' == 'x64' or '$(PlatformTarget)' == 'x86' ) ">$(PlatformTarget)</PreferredNativeSteamworks> 
        <!-- handle Any CPU, considering Prefer32Bit -->
        <PreferredNativeSteamworks Condition=" '$(PreferredNativeSteamworks)' == '' and '$(Prefer32Bit)' == 'False' ">x64</PreferredNativeSteamworks>  
        <PreferredNativeSteamworks Condition=" '$(PreferredNativeSteamworks)' == '' and '$(Prefer32Bit)' == 'True' ">x86</PreferredNativeSteamworks> 
        <!-- fall back to x64 on 64-bit machines -->
        <PreferredNativeSteamworks Condition=" '$(PreferredNativeSteamworks)' == '' and $([System.Environment]::Is64BitOperatingSystem) ">x64</PreferredNativeSteamworks> 
        <!-- fall back to x86 -->
        <PreferredNativeSteamworks Condition=" '$(PreferredNativeSteamworks)' == '' ">x86</PreferredNativeSteamworks>
		
        <SteamworksEnding Condition=" '$(PreferredNativeSteamworks)' == 'x86' "></SteamworksEnding>
		<SteamworksEnding Condition=" '$(PreferredNativeSteamworks)' == 'x64' ">64</SteamworksEnding>
    </PropertyGroup>

    <!-- get the preferred paths -->
    <PropertyGroup>
        <PreferredWindowsNativeSteamworksPath>$(MSBuildThisFileDirectory)..\..\runtimes\win-$(PreferredNativeSteamworks)\native\steam_api$(SteamworksEnding).dll</PreferredWindowsNativeSteamworksPath>
        <PreferredOSXNativeSteamworksPath>$(MSBuildThisFileDirectory)..\..\runtimes\osx\native\libsteam_api.dylib</PreferredOSXNativeSteamworksPath>
        <PreferredLinuxNativeSteamworksPath>$(MSBuildThisFileDirectory)..\..\runtimes\linux-$(PreferredNativeSteamworks)\native\libsteam_api.so</PreferredLinuxNativeSteamworksPath>
		
		<PreferredWindowsSteamworksPath>$(MSBuildThisFileDirectory)..\..\runtimes\win-$(PreferredNativeSteamworks)\lib\netstandard2.0\Steamworks.NET.dll</PreferredWindowsSteamworksPath>
        <PreferredOSXSteamworksPath>$(MSBuildThisFileDirectory)..\..\runtimes\osx\lib\netstandard2.0\Steamworks.NET.dll</PreferredOSXSteamworksPath>
        <PreferredLinuxSteamworksPath>$(MSBuildThisFileDirectory)..\..\runtimes\linux-$(PreferredNativeSteamworks)\lib\netstandard2.0\Steamworks.NET.dll</PreferredLinuxSteamworksPath>
    </PropertyGroup>

    <ItemGroup Condition=" '$(ShouldIncludeNativeSteamworks)' != 'False' ">
        <None Include="$(PreferredWindowsNativeSteamworksPath)" Condition=" Exists('$(PreferredWindowsNativeSteamworksPath)') ">
            <Link>$([System.IO.Path]::GetFilename('$(PreferredWindowsNativeSteamworksPath)'))</Link>
            <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        </None>
        <None Include="$(PreferredOSXNativeSteamworksPath)" Condition=" Exists('$(PreferredOSXNativeSteamworksPath)') ">
            <Link>$([System.IO.Path]::GetFilename('$(PreferredOSXNativeSteamworksPath)'))</Link>
            <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        </None>
        <None Include="$(PreferredLinuxNativeSteamworksPath)" Condition=" Exists('$(PreferredLinuxNativeSteamworksPath)') ">
            <Link>$([System.IO.Path]::GetFilename('$(PreferredLinuxNativeSteamworksPath)'))</Link>
            <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        </None>
		
		<None Include="$(PreferredWindowsSteamworksPath)" Condition=" Exists('$(PreferredWindowsSteamworksPath)') and '$(OS)' == 'Windows_NT' ">
            <Link>$([System.IO.Path]::GetFilename('$(PreferredWindowsSteamworksPath)'))</Link>
            <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        </None>
		<None Include="$(PreferredLinuxSteamworksPath)" Condition=" Exists('$(PreferredLinuxSteamworksPath)') and '$(OS)' == 'Unix' and !Exists('/Library/Frameworks') ">
            <Link>$([System.IO.Path]::GetFilename('$(PreferredLinuxSteamworksPath)'))</Link>
            <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        </None>
		<None Include="$(PreferredOSXSteamworksPath)" Condition=" Exists('$(PreferredOSXSteamworksPath)') and '$(OS)' == 'Unix' AND Exists('/Library/Frameworks') ">
            <Link>$([System.IO.Path]::GetFilename('$(PreferredOSXSteamworksPath)'))</Link>
            <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        </None>
		
		<!-- shame Steamworks.NET cannot be referenced via nuget directly -->
		<Reference Include="Steamworks.NET" Condition="'$(OS)' == 'Windows_NT'">
            <HintPath>$(PreferredWindowsSteamworksPath)</HintPath>
        </Reference>
        <Reference Include="Steamworks.NET" Condition="'$(OS)' == 'Unix' AND !Exists('/Library/Frameworks')">
            <HintPath>$(PreferredLinuxSteamworksPath)</HintPath>
        </Reference>
		<Reference Include="Steamworks.NET" Condition="'$(OS)' == 'Unix' AND Exists('/Library/Frameworks')">
            <HintPath>$(PreferredOSXSteamworksPath)</HintPath>
        </Reference>
    </ItemGroup>
	


</Project>